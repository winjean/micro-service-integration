server:
  port: 7401
spring:
  jpa:
    hibernate:
#      create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#      create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#      update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
#      validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
      ddl-auto: update
#  zipkin:
#    base-url: http://localhost:8601
#  sleuth:
#    sampler:
#      probability: 1
#  boot:
#    admin:
#      client:
#        url: http://localhost:8501
#        instance:
#          prefer-ip: true
  datasource:
    # simple data source
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/winjean?useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: ENC(onfrnTyfM9OPgA7mgNoFDQ==)

    # 数据库连接池配置
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      initial-size: 10  # 初始化大小
      min-idle: 10  # 最小
      max-active: 20  # 最大
      max-wait: 60000  # 配置获取连接等待超时的时间
      time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      min-evictable-idle-time-millis: 300000  # 配置一个连接在池中最小生存的时间，单位是毫秒
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      pool-prepared-statements: true # 打开PSCache
      max-pool-prepared-statement-per-connection-size: 20 # 指定每个连接上PSCache的大小
      filters: stat #,wall,log4j # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      use-global-data-source-stat: true # 合并多个DruidDataSource的监控数据


eureka:
  client:
    service-url:
      defaultZone: http://admin:123456@localhost:8101/eureka
  instance:
    instance-id: ${spring.cloud.client.ip-address}:${server.port}

jasypt:
  encryptor:
    password: winjean

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

